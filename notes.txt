Madison Square Market
PROJECT
It’s time to build fluency in jQuery fundamentals. In this next Pro Project, we’re going to practice mouse actions in jQuery so you can hone your skills and feel confident taking them to the real world. Why? The easiest way to get a hang of jQuery events and actions is to start with events triggered by your mouse. What’s next? A market place, awesome dropdowns, more jQuery. You got this!

INTRODUCTION TO JQUERY
Madison Square Market
Madison Square Market wants to use jQuery to make drop-down menus appear and disappear on its home page.

The steps below outline how to write jQuery code that provides the following interactivity:

A menu appears when a user clicks on a specific menu header
The menu disappears when the user’s mouse exits the menu
If you get stuck during this project or would like to see an experienced developer work through it, click “Get Help“ to see a project walkthrough video.

https://www.youtube.com/watch?v=Fj2j643chAw

1.
Look at index.html:

Note that the jQuery library has already been loaded for you at the bottom of the file.

In the header, there are three <div class="dropdown"> elements with the following ids: #cart, #account, and #help.

When a dropdown is moused over, we want its corresponding <ul class="dropdown-menu"> element to appear, then disappear when the mouse leaves the .dropdown-menu.

In main.js, start by using jQuery to add a ready method call to the document.

2.
In the .ready() callback function, add click event handlers to '#cart', '#account', and '#help'.

Add an empty callback function to each event.

Use the following example code to target an element by id, and add a 'click' event handler to it.

$('#someID').on('click', () => {

})
3.
Inside of each header’s callback function, use a jQuery method to make the corresponding drop-down menu appear.

Use the following example code to show the drop-down menu when a user selects a header element.

$('#someID').on('click', () => {
  $('#someIDMenu').show();
})
4.
Under the click event handlers, add a mouseleave event handler to each of the '.dropdown-menu's. Add an empty callback function.

Try targeting by class this time.

Use the following example code to target elements by class, then add a 'mouseleave' event handler to them.

$('.someClass').on('mouseleave', () => {

})
5.
Inside of the callback function, use a jQuery method to make the drop-down menu disappear.

Use the following example code to make the targeted elements disappear.

$('.someClass').on('mouseleave', () => {
  $('.someClass').hide();
})
